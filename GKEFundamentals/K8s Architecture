Control Plane:-Cluster includes Master and nodes. (Virtual machines)
The job of node is to run the pods.
Master - Kube-APIServer(kubectl) authenticats the incoming connections
etcd- Clusters database. It stores clusters configuration data and nodes and pods. KubeAPI interacts with the etcd
kube-scheduler:- Responsibe for scheduling pods onto the nodes. Evaluates the requirements the pods and selects which node is suitable.
KubeController Manager:-Monitors the state of the cluster through the APIServer. loops of code called controllers.
KubeCloud Manager:- interacts with all cloud providers.

Kubelet runs on the nodes. ContainerD (docker run time).
Kube-proxy: runs in node and responsibe for networking.

Which master control plane component is the only one with which clients interact directly? kube-APIServer
What is the role of the kubelet? To serve as Kubernetesâ€™s agent on each node

What is the purpose of configuring a regional cluster in GKE?
To allow applications running in the cluster to withstand the loss of a zone
In GKE clusters, how are nodes provisioned?
As Compute Engine virtual machines
In GKE, how are masters provisioned?
As abstract parts of the GKE service that are not exposed to GCP customers

K8s Object Management:
All Kubernetes objects are identified by a unique name and a unique identifier.
objects are defined in yaml format.
Kind defines object you want.
metadata helps identify the object using name, unique id, and an optional namespace.
Each object generated throughout the life of a cluster has a unique ID generated by Kubernetes. This means that no two objects will have the same UID throughout the life of a cluster.
Labels are key value pairs with which you tag your objects during or after their creation. 

In a manifest file for a Pod, in which field do you define a container image for the Pod? spec
What is the purpose of the Deployment object? To ensure that a defined set of Pods is running at any given time.

Namespaces allow you to use object names that would otherwise be duplicates of one another.
Namespaces let you implement resource quotas across your cluster.

Kubernetes Controller Objects:-
service:-A Kubernetes service is a static IP address that represents a service or a function in your infrastructure.
Provides durable endpoints.

Volume:-A volume is simply a directory that is accessible to all the containers in a Pod. The requirements for a volume are defined through the Pod's specification.

Services provide load-balanced access to specified Pods. There are three primary types of Services:
ClusterIP: Exposes the service on an IP address that is only accessible from within this cluster. This is the default type.
NodePort: Exposes the service on the IP address of each node in the cluster, at a specific port number.
LoadBalancer: Exposes the service externally, using a load balancing service provided by a cloud provider.

This reading explains the relationship among several Kubernetes controller objects:
ReplicaSets
Deployments
Replication Controllers
StatefulSets
DaemonSets
Jobs
A ReplicaSet controller ensures that a population of Pods, all identical to one another, are running at the same time.
Deployments let you do declarative updates to ReplicaSets and Pods. In fact, Deployments manage their own ReplicaSets to achieve the declarative goals you prescribe, so you will most commonly work with Deployment objects.

Deployments let you create, update, roll back, and scale Pods, using ReplicaSets as needed to do so.
For example, when you perform a rolling upgrade of a Deployment, the Deployment object creates a second ReplicaSet, and then increases the number of Pods in the new ReplicaSet as it decreases the number of Pods in its original ReplicaSet.

Replication Controllers perform a similar role to the combination of ReplicaSets and Deployments, but their use is no longer recommended.
Because Deployments provide a helpful "front end" to ReplicaSets, this training course chiefly focuses on Deployments.

If you need to deploy applications that maintain local state, StatefulSet is a better option. 
A StatefulSet is similar to a Deployment in that the Pods use the same container spec. The Pods created through Deployment are not given persistent identities,
however; by contrast, Pods created using StatefulSet have unique persistent identities with stable network identity and persistent disk storage.

If you need to run certain Pods on all the nodes within the cluster or on a selection of nodes, use DaemonSet. DaemonSet ensures that a specific Pod is always running on all or some subset of the nodes.
If new nodes are added, DaemonSet will automatically set up Pods in those nodes with the required specification.
The word "daemon" is a computer science term meaning a non-interactive process that provides useful services to other processes. 
A Kubernetes cluster might use a DaemonSet to ensure that a logging agent like fluentd is running on all nodes in the cluster.

The Job controller creates one or more Pods required to run a task. When the task is completed, Job will then terminate all those Pods. A related controller is CronJob, which runs Pods on a time-based schedule.
(https://quizlet.com/br/439629134/kubernetes-architecture-flash-cards/)